package workshop.mandelbrot

import spinal.core._
import spinal.lib._

case class PixelSolverGenerics(fixAmplitude : Int,
                               fixResolution : Int,
                               iterationLimit : Int){
  val iterationWidth = log2Up(iterationLimit+1)
  def iterationType = UInt(iterationWidth bits)
  def fixType = SFix(
    peak = fixAmplitude exp,
    resolution = fixResolution exp
  )
}

case class PixelTask(g : PixelSolverGenerics) extends Bundle{
  val x,y = g.fixType
}

case class PixelResult(g : PixelSolverGenerics) extends Bundle{
  val iteration = g.iterationType
}



case class PixelSolver(g : PixelSolverGenerics) extends Component{
  val io = new Bundle{
    val cmd = slave  Stream(PixelTask(g))
    val rsp = master Stream(PixelResult(g))
  }

  import g._

  // Id width that allow router reordering
  val idWidth = 3

  // Base context used in each stage of the pipeline
  trait Context{
    val id        = UInt(idWidth bits)
    val x0,y0     = fixType
    val iteration = UInt(iterationWidth bits)
    val done      = Bool
  }

  // Context used at each stages of the pipeline
  case class InserterContext() extends Bundle with Context{
    val x,y = fixType
  }
  case class MulStageContext() extends Bundle with Context{
    val xx,yy,xy = fixType
  }
  case class AddStageContext() extends Bundle with Context{
    val x,y = fixType
  }
  case class RouterContext() extends Bundle with Context{
    val x,y = fixType
  }

  
  val inserter = new Area{
    val freeId = Counter(1 << idWidth,inc = io.cmd.fire)

  }

  val mulStage = new Area{

  }

  val addStage = new Area{

  }

  val router = new Area{
    val wantedId = Counter(1 << idWidth,inc = io.rsp.fire)

  }
}

